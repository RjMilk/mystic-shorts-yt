"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
"""

import httpx
import asyncio
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime
import json

from config.settings import get_settings

logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self):
        self.settings = get_settings()
        self.bot_token = self.settings.telegram_bot_token
        self.chat_id = self.settings.telegram_chat_id
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def send_message(
        self, 
        message: str, 
        chat_id: Optional[str] = None,
        parse_mode: str = "HTML"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            if not self.bot_token:
                logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            target_chat_id = chat_id or self.chat_id
            if not target_chat_id:
                logger.warning("Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": target_chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=data)
                
                if response.status_code == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message[:50]}...")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def send_notification(
        self, 
        message: str, 
        notification_type: str = "info",
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            emoji_map = {
                "info": "‚ÑπÔ∏è",
                "success": "‚úÖ",
                "warning": "‚ö†Ô∏è",
                "error": "‚ùå",
                "upload": "üì§",
                "account": "üë§",
                "proxy": "üåê"
            }
            
            emoji = emoji_map.get(notification_type, "‚ÑπÔ∏è")
            formatted_message = f"{emoji} {message}"
            
            return await self.send_message(formatted_message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_upload_notification(
        self, 
        video_title: str, 
        account_email: str,
        youtube_url: str,
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ"""
        try:
            message = f"""
üì§ <b>–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>

üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {video_title}
üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {account_email}
üîó <b>–°—Å—ã–ª–∫–∞:</b> {youtube_url}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            return await self.send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return False
    
    async def send_account_notification(
        self, 
        account_email: str, 
        action: str,
        status: str,
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            action_map = {
                "created": "—Å–æ–∑–¥–∞–Ω",
                "verified": "–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
                "warmed_up": "–ø—Ä–æ–≥—Ä–µ—Ç",
                "suspended": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                "banned": "–∑–∞–±–∞–Ω–µ–Ω"
            }
            
            action_text = action_map.get(action, action)
            
            message = f"""
üë§ <b>–ê–∫–∫–∞—É–Ω—Ç {action_text}</b>

üìß <b>Email:</b> {account_email}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            return await self.send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            return False
    
    async def send_error_notification(
        self, 
        error_message: str, 
        context: str = "",
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</b>

üîç <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {context}
üìù <b>–û—à–∏–±–∫–∞:</b> {error_message}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            return await self.send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False
    
    async def send_daily_report(
        self, 
        stats: Dict[str, Any],
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üì§ <b>–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:</b> {stats.get('videos_uploaded', 0)}
üë§ <b>–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> {stats.get('active_accounts', 0)}
üåê <b>–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> {stats.get('working_proxies', 0)}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {stats.get('errors', 0)}
‚è∞ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}
            """
            
            return await self.send_message(message, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def send_custom_message(
        self, 
        message: str, 
        chat_id: Optional[str] = None,
        reply_markup: Optional[Dict] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            if not self.bot_token:
                return False
            
            target_chat_id = chat_id or self.chat_id
            if not target_chat_id:
                return False
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": target_chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, json=data)
                return response.status_code == 200
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
